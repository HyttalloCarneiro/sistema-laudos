# M√≥dulo 7: Modelos de Laudo (Padr√£o vs. 17¬™ Vara)
# Vers√£o 2.3.1: Refatora√ß√£o do c√≥digo para corrigir erro de execu√ß√£o.
# Objetivo: Simplificar a estrutura interna do c√≥digo para garantir a estabilidade
# na plataforma Streamlit Cloud, mantendo a funcionalidade de laudo sequencial.

import streamlit as st
import google.generativeai as genai
import PyPDF2
from io import BytesIO

# --- 2. Constantes e Textos Fixos ---
QUESITOS_JUIZ_17_VARA = """
1) A parte autora √© portadora de alguma doen√ßa ou sequela? Qual a doen√ßa ou sequela e desde quando (data precisa ou pelo menos aproximada)?
2) Se positiva a resposta anterior, tal doen√ßa ou sequela o(a) incapacita para o exerc√≠cio de atividade laborativa? Qual a data do in√≠cio da incapacidade (data precisa ou pelo menos aproximada)?
3) Se positiva a resposta anterior, trata-se de incapacidade tempor√°ria ou definitiva? A doen√ßa incapacitante √© revers√≠vel, levando em conta a idade e condi√ß√µes socioecon√¥micas do periciando?
4) Caso o(a) periciando(a) seja crian√ßa ou adolescente, at√© dezesseis anos de idade, h√° limita√ß√£o do desempenho de atividade e restri√ß√£o da participa√ß√£o social, compat√≠vel com a idade?
5) Havendo incapacidade, esclare√ßa o Sr. Perito se a incapacidade para o trabalho abrange qualquer atividade laborativa.
6) Havendo incapacidade, a parte autora (pericianda) necessita da assist√™ncia permanente de outra pessoa?
7) Preste o Sr. Perito os esclarecimentos adicionais que considerar necess√°rios.
"""
QUESITOS_REU_INSS = """
SOBRE A IDENTIFICA√á√ÉO DO PERICIANDO E DO PERITO:
1) Quais os documentos de identifica√ß√£o com foto (RG, Carteira de Motorista, Carteira Profissional etc.) que foram apresentados ao Sr. Perito, para se comprovar que de fato o autor da a√ß√£o √© aquele que se apresenta para a realiza√ß√£o da Per√≠cia M√©dica?
2) O Periciando possui algum grau de parentesco ou j√° foi atendido anteriormente pelo Sr. Perito? Se h√° grau de parentesco, qual?
SOBRE A EXIST√äNCIA DE EVENTUAL ENFERMIDADE (DOEN√áA):
3) Quais os sintomas, os sinais e os exames realizados que comprovam o diagn√≥stico?
SOBRE A EXIST√äNCIA DE EVENTUAL INCAPACIDADE LABORATIVA:
4) Em caso de incapacidade, informe o Sr. Perito se ela √© PERMANENTE ou TEMPOR√ÅRIA. (...)
5) Em caso de incapacidade, ela √© para qualquer atividade f√≠sica e laborativa (INCAPACIDADE TOTAL) ou somente para algumas atividades laborais (INCAPACIDADE PARCIAL)? (...)
6) Na √©poca da cessa√ß√£o/indeferimento (DCB/DER) do benef√≠cio na esfera administrativa, o autor apresentava o mesmo estado atual? (...)
7) Havendo incapacidade, o autor estaria apto a submeter-se a REABILITA√á√ÉO profissional para o exerc√≠cio de outras atividades que lhe garantissem a subsist√™ncia? (...)
8) H√° NEXO CAUSAL entre a enfermidade/les√£o constatada e a atividade profissional do autor? (...)
9) Indique o expert judicial OUTRAS CONSIDERA√á√ïES que entender necess√°rias e complementares ao caso em foco.
"""
RESPOSTA_PADRAO_JUIZ_4 = "Quesito prejudicado, tendo em vista que o(a) periciando(a) √© maior de idade."
RESPOSTA_JUIZ_5_PREJUDICADO = "Prejudicado, n√£o reconhecida incapacidade laboral da parte autora."
RESPOSTA_PADRAO_JUIZ_6_NAO = "N√£o foi constatada a necessidade de assist√™ncia permanente de outra pessoa."
RESPOSTA_PADRAO_JUIZ_6_SIM = "Sim, foi constatada a necessidade de assist√™ncia permanente de outra pessoa."
RESPOSTA_PADRAO_JUIZ_7 = "Demais esclarecimentos prestados no t√≥pico discursivo e demais quesitos do presente laudo."
RESPOSTA_PADRAO_REU_1 = "Identificado por documento civil exposto na apresenta√ß√£o deste laudo."
RESPOSTA_PADRAO_REU_2 = "N√£o, para ambas indaga√ß√µes."
RESPOSTA_PADRAO_REU_9 = "Demais considera√ß√µes prestadas no t√≥pico discursivo e demais quesitos do presente laudo."
RESPOSTA_INCAPACIDADE_TOTAL = "Reconhe√ßo a incapacidade como omniprofissional."
RESPOSTA_INCAPACIDADE_UNIPROFISSIONAL = "Reconhe√ßo a incapacidade como uniprofissional, exclusivamente para o exerc√≠cio de sua atividade habitual."
TEMPLATE_INCAPACIDADE_PARCIAL = "Reconhe√ßo a incapacidade como multiprofissional, abrangendo sua fun√ß√£o, qual seja '{funcao}' e demais atividades que demandem '{restricao}'."

# --- 3. Fun√ß√µes Auxiliares ---
def extrair_texto_de_pdf(arquivo_pdf_bytes):
    try:
        arquivo_em_memoria = BytesIO(arquivo_pdf_bytes)
        leitor_pdf = PyPDF2.PdfReader(arquivo_em_memoria)
        texto_completo = ""
        for pagina in leitor_pdf.pages:
            texto_extraido = pagina.extract_text()
            if texto_extraido:
                texto_completo += texto_extraido + "\n"
        return texto_completo
    except Exception as e:
        st.error(f"Erro ao ler o ficheiro PDF: {e}")
        return None

# --- 4. Interface do Utilizador (Streamlit) ---
st.set_page_config(page_title="Gerador de Laudos Automatizado", layout="wide")
st.title("ü§ñ Assistente para Gera√ß√£o de Laudos M√©dicos v2.3")

# --- Coluna de Configura√ß√£o (Esquerda) ---
with st.sidebar:
    st.header("1. Defini√ß√£o da Conclus√£o")
    resultado_conclusao = st.radio(
        "Resultado da Per√≠cia:",
        ("Incapacidade Reconhecida", "Incapacidade N√£o Reconhecida"),
        key="resultado_conclusao"
    )

    natureza_incapacidade, duracao_meses, tipo_abrangencia, funcao_autor_parcial, restricao_autor, profissao_uniprofissional_manual = "", 0, None, "", "", ""
    if resultado_conclusao == "Incapacidade Reconhecida":
        natureza_incapacidade = st.radio("Natureza da Incapacidade:", ("Tempor√°ria", "Permanente"))
        if natureza_incapacidade == "Tempor√°ria":
            duracao_meses = st.number_input("Dura√ß√£o da incapacidade (meses):", min_value=1, value=6)
        
        tipo_abrangencia = st.radio(
            "Abrang√™ncia da incapacidade (Quesito 5 do Juiz):",
            ("Incapacidade Total (Omniprofissional)", "Incapacidade Parcial (Multiprofissional)", "Incapacidade Uniprofissional"),
            key="tipo_abrangencia"
        )
        if tipo_abrangencia == "Incapacidade Parcial (Multiprofissional)":
            funcao_autor_parcial = st.text_input("Fun√ß√£o do autor:", placeholder="Ex: Agricultor(a)")
            restricao_autor = st.text_input("Restri√ß√£o do autor:", placeholder="Ex: esfor√ßo f√≠sico")
        elif tipo_abrangencia == "Incapacidade Uniprofissional":
            profissao_uniprofissional_manual = st.text_input("Substituir profiss√£o (opcional):", placeholder="Ex: Dom√©stica")

    st.divider()

    st.header("2. Respostas Padr√£o Adicionais")
    periciando_adulto = st.checkbox("Periciando √© adulto (Quesito 4 do Juiz)?", value=True)
    if resultado_conclusao == "Incapacidade Reconhecida":
        assistencia_permanente = st.checkbox("Necessita de assist√™ncia permanente (Quesito 6 do Juiz)?", value=False)
    else:
        assistencia_permanente = False

    st.divider()
    
    st.header("3. Configura√ß√µes e Upload")
    google_api_key = st.secrets.get("GOOGLE_API_KEY") or st.text_input("Insira a sua Chave de API do Google AI", type="password")
    uploaded_file = st.file_uploader("Fa√ßa o upload do documento (PDF)", type="pdf")

# --- L√≥gica Principal ---
def gerar_laudo_completo():
    try:
        with st.spinner("A processar o laudo... Por favor, aguarde."):
            # --- Etapa 1: Configura√ß√£o e Extra√ß√£o de Texto ---
            genai.configure(api_key=google_api_key)
            texto_documento = extrair_texto_de_pdf(uploaded_file.getvalue())
            if not texto_documento:
                st.error("N√£o foi poss√≠vel extrair texto do PDF.")
                return

            model = genai.GenerativeModel('gemini-1.5-pro-latest')

            # --- Etapa 2: Extrair Quesitos do Autor ---
            prompt_extracao_autor = f"Analise o texto completo do processo a seguir. Localize a se√ß√£o de 'Quesitos da Parte Autora'. Se encontrar quesitos e n√£o houver indica√ß√£o de que foram indeferidos, extraia e liste APENAS os quesitos, numerados. Se n√£o houver quesitos da parte autora ou se foram indeferidos, responda APENAS com a palavra 'NENHUM'.\n\nTEXTO:\n{texto_documento}"
            response_autor = model.generate_content(prompt_extracao_autor)
            quesitos_autor_extraidos = response_autor.text.strip()

            # --- Etapa 3: Construir Conclus√£o e Instru√ß√µes ---
            if resultado_conclusao == "Incapacidade N√£o Reconhecida":
                conclusao_texto = "Diante do exposto na an√°lise pericial, n√£o foi constatada a exist√™ncia de incapacidade laboral para a parte autora."
            else:
                conclusao_texto = f"Diante do exposto na an√°lise pericial, foi constatada a exist√™ncia de incapacidade laboral de natureza {natureza_incapacidade.lower()}"
                conclusao_texto += f", com prazo de recupera√ß√£o estimado em {duracao_meses} meses." if natureza_incapacidade == "Tempor√°ria" else "."

            instrucoes_juiz = [f"Para o quesito 7, use a resposta: '{RESPOSTA_PADRAO_JUIZ_7}'."]
            if periciando_adulto:
                instrucoes_juiz.append(f"Para o quesito 4, use a resposta: '{RESPOSTA_PADRAO_JUIZ_4}'.")
            
            if resultado_conclusao == "Incapacidade N√£o Reconhecida":
                instrucoes_juiz.append(f"Para o quesito 5, use a resposta: '{RESPOSTA_JUIZ_5_PREJUDICADO}'.")
                instrucoes_juiz.append(f"Para o quesito 6, use a resposta: '{RESPOSTA_JUIZ_5_PREJUDICADO}'.")
            else:
                instrucoes_juiz.append(f"Para o quesito 6, use a resposta: '{RESPOSTA_PADRAO_JUIZ_6_SIM if assistencia_permanente else RESPOSTA_PADRAO_JUIZ_6_NAO}'.")
                if tipo_abrangencia == "Incapacidade Total (Omniprofissional)":
                    instrucoes_juiz.append(f"Para o quesito 5, use a resposta: '{RESPOSTA_INCAPACIDADE_TOTAL}'.")
                elif tipo_abrangencia == "Incapacidade Uniprofissional":
                    instrucoes_juiz.append(f"Para o quesito 5, use a resposta: '{RESPOSTA_INCAPACIDADE_UNIPROFISSIONAL}'.")
                elif tipo_abrangencia == "Incapacidade Parcial (Multiprofissional)":
                    resposta_parcial = TEMPLATE_INCAPACIDADE_PARCIAL.format(funcao=funcao_autor_parcial, restricao=restricao_autor)
                    instrucoes_juiz.append(f"Para o quesito 5, use a resposta: '{resposta_parcial}'.")

            instrucoes_reu = [
                f"Para o quesito 1, use a resposta: '{RESPOSTA_PADRAO_REU_1}'.",
                f"Para o quesito 2, use a resposta: '{RESPOSTA_PADRAO_REU_2}'.",
                f"Para o quesito 9, use a resposta: '{RESPOSTA_PADRAO_REU_9}'."
            ]

            secao_autor = "### RESPOSTA AOS QUESITOS DA PARTE AUTORA\n\nN√£o foram apresentados quesitos pela parte autora ou os mesmos foram indeferidos."
            if quesitos_autor_extraidos.upper() != 'NENHUM':
                secao_autor = f"### RESPOSTA AOS QUESITOS DA PARTE AUTORA\nResponda aos seguintes quesitos da parte autora, que foram extra√≠dos do documento, baseando-se no mesmo documento de refer√™ncia.\n\nQuesitos do Autor:\n---\n{quesitos_autor_extraidos}\n---"

            # --- Etapa 4: Montar o Prompt Final e Gerar ---
            prompt_final = f"""
            Voc√™ √© um assistente especialista em laudos periciais. A sua tarefa √© estruturar um laudo completo com as se√ß√µes abaixo, seguindo as instru√ß√µes rigorosamente.

            ### CONCLUS√ÉO
            {conclusao_texto}

            ### RESPOSTA AOS QUESITOS DO JU√çZO
            Responda aos quesitos do ju√≠zo abaixo.
            **Instru√ß√µes Especiais para os Quesitos do Ju√≠zo:**
            {chr(10).join(f'- {inst}' for inst in instrucoes_juiz)}
            - Para os demais quesitos, baseie-se no documento de refer√™ncia.
            **Quesitos do Ju√≠zo:**
            ---
            {QUESITOS_JUIZ_17_VARA}
            ---

            {secao_autor}

            ### RESPOSTA AOS QUESITOS DO R√âU
            Responda aos quesitos do r√©u abaixo.
            **Instru√ß√µes Especiais para os Quesitos do R√©u:**
            {chr(10).join(f'- {inst}' for inst in instrucoes_reu)}
            - Para os demais quesitos, baseie-se no documento de refer√™ncia.
            **Quesitos do R√©u:**
            ---
            {QUESITOS_REU_INSS}
            ---

            **Documento de Refer√™ncia para An√°lise:**
            ---
            {texto_documento}
            ---
            """
            response = model.generate_content(prompt_final)
            
            st.success("Laudo gerado com sucesso!")
            st.markdown("---")
            st.header("Resultado da An√°lise")
            st.markdown(response.text)

    except Exception as e:
        st.error(f"Ocorreu um erro durante a gera√ß√£o do laudo: {e}")

if st.button("Gerar Laudo Completo"):
    if not google_api_key or not uploaded_file:
        st.warning("Por favor, insira a chave de API e fa√ßa o upload de um ficheiro PDF.")
    else:
        gerar_laudo_completo()
