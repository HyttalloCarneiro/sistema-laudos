# M√≥dulo 7: Modelos de Laudo (Padr√£o vs. 17¬™ Vara)
# Vers√£o 1.6: L√≥gica de conclus√£o controlada pelo usu√°rio.
# Objetivo: Garantir que a conclus√£o do laudo seja gerada exclusivamente
# a partir das sele√ß√µes do usu√°rio, eliminando ambiguidades da IA.

import streamlit as st
import google.generativeai as genai
import PyPDF2
from io import BytesIO

# --- 2. Constantes e Textos Fixos ---
QUESITOS_JUIZO_17_VARA = """
1) A parte autora √© portadora de alguma doen√ßa ou sequela? Qual a doen√ßa ou sequela e desde quando (data precisa ou pelo menos aproximada)?

2) Se positiva a resposta anterior, tal doen√ßa ou sequela o(a) incapacita para o exerc√≠cio de atividade laborativa? Qual a data do in√≠cio da incapacidade (data precisa ou pelo menos aproximada)?

3) Se positiva a resposta anterior, trata-se de incapacidade tempor√°ria ou definitiva? A doen√ßa incapacitante √© revers√≠vel, levando em conta a idade e condi√ß√µes socioecon√¥micas do periciando?

4) Caso o(a) periciando(a) seja crian√ßa ou adolescente, at√© dezesseis anos de idade, h√° limita√ß√£o do desempenho de atividade e restri√ß√£o da participa√ß√£o social, compat√≠vel com a idade?

5) Havendo incapacidade, esclare√ßa o Sr. Perito se a incapacidade para o trabalho abrange qualquer atividade laborativa.

6) Havendo incapacidade, a parte autora (pericianda) necessita da assist√™ncia permanente de outra pessoa?

7) Preste o Sr. Perito os esclarecimentos adicionais que considerar necess√°rios.
"""

# RESPOSTAS PADR√ÉO PARA QUESITOS
RESPOSTA_PADRAO_QUESITO_4 = "Quesito prejudicado, tendo em vista que o(a) periciando(a) √© maior de idade."
RESPOSTA_PADRAO_QUESITO_6_NAO = "N√£o foi constatada a necessidade de assist√™ncia permanente de outra pessoa."
RESPOSTA_PADRAO_QUESITO_6_SIM = "Sim, foi constatada a necessidade de assist√™ncia permanente de outra pessoa."
RESPOSTA_PADRAO_QUESITO_7 = "Demais esclarecimentos prestados no t√≥pico discursivo e demais quesitos do presente laudo."
RESPOSTA_INCAPACIDADE_TOTAL = "Reconhe√ßo a incapacidade como omniprofissional."
RESPOSTA_INCAPACIDADE_INEXISTENTE = "N√£o reconhe√ßo a exist√™ncia de incapacidade para o trabalho."
TEMPLATE_INCAPACIDADE_PARCIAL = "Reconhe√ßo a incapacidade como multiprofissional, abrangendo sua fun√ß√£o, qual seja '{funcao}' e demais atividades que demandem '{restricao}'."

# --- 3. Fun√ß√µes Auxiliares ---
def extrair_texto_de_pdf(arquivo_pdf_bytes):
    try:
        arquivo_em_memoria = BytesIO(arquivo_pdf_bytes)
        leitor_pdf = PyPDF2.PdfReader(arquivo_em_memoria)
        texto_completo = ""
        for pagina in leitor_pdf.pages:
            texto_extraido = pagina.extract_text()
            if texto_extraido:
                texto_completo += texto_extraido + "\n"
        return texto_completo
    except Exception as e:
        st.error(f"Erro ao ler o arquivo PDF: {e}")
        return None

# --- 4. Interface do Usu√°rio (Streamlit) ---
st.set_page_config(page_title="Gerador de Laudos Automatizado", layout="wide")
st.title("ü§ñ Assistente para Gera√ß√£o de Laudos M√©dicos v1.6")

# --- Coluna de Configura√ß√£o (Esquerda) ---
with st.sidebar:
    st.header("1. Defini√ß√£o da Conclus√£o")
    resultado_conclusao = st.radio(
        "Resultado da Per√≠cia:",
        ("Incapacidade Reconhecida", "Incapacidade N√£o Reconhecida"),
        key="resultado_conclusao"
    )

    natureza_incapacidade = ""
    duracao_meses = 0
    if resultado_conclusao == "Incapacidade Reconhecida":
        natureza_incapacidade = st.radio("Natureza da Incapacidade:", ("Tempor√°ria", "Permanente"))
        if natureza_incapacidade == "Tempor√°ria":
            duracao_meses = st.number_input("Dura√ß√£o da incapacidade (meses):", min_value=1, value=6)

    st.divider()

    st.header("2. Respostas Padr√£o para Quesitos")
    periciando_adulto = st.checkbox("Periciando √© adulto (Quesito 4)?", value=True)
    assistencia_permanente = st.checkbox("Necessita de assist√™ncia permanente (Quesito 6)?", value=False)
    
    tipo_abrangencia = st.radio(
        "Abrang√™ncia da incapacidade (Quesito 5):",
        ("Analisar do documento", "Incapacidade Inexistente", "Incapacidade Total", "Incapacidade Parcial"),
        key="tipo_abrangencia",
        help="Esta op√ß√£o s√≥ ser√° usada se a incapacidade for reconhecida na conclus√£o."
    )

    funcao_autor = ""
    restricao_autor = ""
    if tipo_abrangencia == "Incapacidade Parcial":
        funcao_autor = st.text_input("Fun√ß√£o do autor:", placeholder="Ex: Agricultor(a)")
        restricao_autor = st.text_input("Restri√ß√£o do autor:", placeholder="Ex: esfor√ßo f√≠sico")

    st.divider()
    
    st.header("3. Configura√ß√µes do Sistema")
    google_api_key = None
    try:
        google_api_key = st.secrets["GOOGLE_API_KEY"]
        st.success("Chave de API carregada com sucesso!", icon="‚úÖ")
    except (KeyError, FileNotFoundError):
        st.warning("Chave de API n√£o encontrada nos segredos.")
        google_api_key = st.text_input("Insira sua Chave de API do Google AI", type="password")

    st.header("4. Arquivo do Processo")
    uploaded_file = st.file_uploader("Fa√ßa o upload do documento (PDF)", type="pdf")

# --- √Årea Principal (Direita) ---
st.header("Quesitos para An√°lise")
quesitos_input = st.text_area("Quesitos Padr√£o (17¬™ Vara):", value=QUESITOS_JUIZO_17_VARA, height=350)

if st.button("Gerar Laudo Completo"):
    if not google_api_key or not uploaded_file:
        st.warning("Por favor, insira a chave de API e fa√ßa o upload de um arquivo PDF.")
    else:
        with st.spinner("Gerando laudo com base nas suas defini√ß√µes..."):
            try:
                # --- PASSO 1: Construir o par√°grafo de conclus√£o com base nas sele√ß√µes ---
                conclusao_texto = ""
                if resultado_conclusao == "Incapacidade N√£o Reconhecida":
                    conclusao_texto = "Diante do exposto na an√°lise pericial, n√£o foi constatada a exist√™ncia de incapacidade laboral para a parte autora."
                else: # Incapacidade Reconhecida
                    if natureza_incapacidade == "Permanente":
                        conclusao_texto = "Diante do exposto na an√°lise pericial, foi constatada a exist√™ncia de incapacidade laboral de natureza permanente para a parte autora."
                    else: # Tempor√°ria
                        conclusao_texto = f"Diante do exposto na an√°lise pericial, foi constatada a exist√™ncia de incapacidade laboral de natureza tempor√°ria, com prazo de recupera√ß√£o estimado em {duracao_meses} meses."

                # --- PASSO 2: Preparar as instru√ß√µes para os quesitos ---
                genai.configure(api_key=google_api_key)
                texto_documento = extrair_texto_de_pdf(uploaded_file.getvalue())
                
                if texto_documento:
                    model = genai.GenerativeModel('gemini-1.5-pro-latest')
                    
                    instrucoes_quesitos = [
                        f"Para o quesito 7, use exclusivamente a seguinte resposta: '{RESPOSTA_PADRAO_QUESITO_7}'."
                    ]
                    quesitos_a_ignorar = ["7"]

                    if periciando_adulto:
                        instrucoes_quesitos.append(f"Para o quesito 4, use a resposta: '{RESPOSTA_PADRAO_QUESITO_4}'.")
                        quesitos_a_ignorar.append("4")
                    
                    if assistencia_permanente:
                        instrucoes_quesitos.append(f"Para o quesito 6, use a resposta: '{RESPOSTA_PADRAO_QUESITO_6_SIM}'.")
                    else:
                        instrucoes_quesitos.append(f"Para o quesito 6, use a resposta: '{RESPOSTA_PADRAO_QUESITO_6_NAO}'.")
                    quesitos_a_ignorar.append("6")

                    if tipo_abrangencia != "Analisar do documento":
                        quesitos_a_ignorar.append("5")
                        if tipo_abrangencia == "Incapacidade Inexistente":
                            instrucoes_quesitos.append(f"Para o quesito 5, use a resposta: '{RESPOSTA_INCAPACIDADE_INEXISTENTE}'.")
                        elif tipo_abrangencia == "Incapacidade Total":
                            instrucoes_quesitos.append(f"Para o quesito 5, use a resposta: '{RESPOSTA_INCAPACIDADE_TOTAL}'.")
                        elif tipo_abrangencia == "Incapacidade Parcial":
                            if funcao_autor and restricao_autor:
                                resposta_parcial = TEMPLATE_INCAPACIDADE_PARCIAL.format(funcao=funcao_autor, restricao=restricao_autor)
                                instrucoes_quesitos.append(f"Para o quesito 5, use a resposta: '{resposta_parcial}'.")
                            else:
                                st.warning("Para incapacidade parcial, preencha os campos 'Fun√ß√£o' e 'Restri√ß√£o'.")
                                st.stop()
                    
                    # --- PASSO 3: Montar o prompt final para a IA ---
                    prompt_final = f"""
                    Voc√™ √© um assistente especialista em laudos periciais. Sua tarefa √© estruturar um laudo completo em duas partes, seguindo as instru√ß√µes rigorosamente.

                    ### TAREFA 1: CONCLUS√ÉO
                    Apresente o seguinte par√°grafo como a conclus√£o do laudo. N√£o modifique ou adicione nada a este texto.
                    ---
                    {conclusao_texto}
                    ---

                    ### TAREFA 2: RESPOSTA AOS QUESITOS
                    Abaixo da conclus√£o, responda aos quesitos listados, numerando cada resposta.
                    
                    **Instru√ß√µes Especiais para os Quesitos:**
                    {chr(10).join(f'- {inst}' for inst in instrucoes_quesitos)}
                    - Para os demais quesitos (que n√£o sejam {', '.join(sorted(list(set(quesitos_a_ignorar))))}), baseie-se exclusivamente no documento de refer√™ncia para formular suas respostas.

                    **Documento de Refer√™ncia:**
                    ---
                    {texto_documento}
                    ---
                    **Quesitos:**
                    ---
                    {quesitos_input}
                    ---
                    """

                    response = model.generate_content(prompt_final)
                    
                    st.success("Laudo gerado com sucesso!")
                    st.markdown("---")
                    st.header("Resultado da An√°lise")
                    st.markdown(response.text)
            except Exception as e:
                st.error(f"Ocorreu um erro durante a gera√ß√£o do laudo: {e}")

st.info("Lembre-se: Este √© um rascunho gerado por IA. Sempre revise e valide as informa√ß√µes cuidadosamente antes de qualquer uso oficial.", icon="‚ö†Ô∏è")
