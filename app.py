# Sistema de Gest√£o de Laudos Periciais
# Vers√£o DEBUG: Modo de Depura√ß√£o para os Segredos do Firebase.
# Objetivo: Diagnosticar o erro de formata√ß√£o da chave privada ao exibir
# o conte√∫do exato que est√° a ser lido pelo aplicativo.

import streamlit as st
import firebase_admin
from firebase_admin import credentials

# --- Fun√ß√£o de Depura√ß√£o ---
def debug_firestore_secrets():
    """
    Esta fun√ß√£o n√£o inicializa o Firebase, mas sim exibe informa√ß√µes de depura√ß√£o
    sobre as credenciais para identificar o erro de formata√ß√£o.
    """
    st.title("üë®‚Äç‚öïÔ∏è Modo de Depura√ß√£o dos Segredos")
    st.info("Esta p√°gina vai ajudar-nos a diagnosticar o problema com as suas credenciais do Firebase.")
    st.write("---")

    try:
        # 1. Verificar se o segredo principal existe
        st.subheader("1. A verificar `[firebase_credentials]`")
        if "firebase_credentials" not in st.secrets:
            st.error("ERRO: O segredo `[firebase_credentials]` n√£o foi encontrado no seu ficheiro secrets.toml online.")
            st.write("Por favor, verifique se copiou o cabe√ßalho `[firebase_credentials]` para a caixa de segredos no site do Streamlit.")
            st.stop()
        
        creds_dict = st.secrets["firebase_credentials"]
        st.success("‚úÖ Segredo `[firebase_credentials]` encontrado!")
        st.write("---")

        # 2. Verificar se a chave privada existe dentro do segredo
        st.subheader("2. A verificar `private_key`")
        if "private_key" not in creds_dict:
            st.error("ERRO: A `private_key` n√£o foi encontrada dentro de `[firebase_credentials]`.")
            st.write("Isto indica um problema no formato do texto que foi colado nos segredos.")
            st.stop()

        private_key_original = creds_dict["private_key"]
        st.success("‚úÖ `private_key` encontrada!")
        st.write("---")

        # 3. Mostrar informa√ß√µes de depura√ß√£o sobre a chave
        st.subheader("3. An√°lise da Chave Privada (Como o Streamlit a v√™)")
        st.write(f"**Tipo de dados da chave:** `{type(private_key_original)}`")
        
        st.write("**Primeiros 150 caracteres da chave original:**")
        st.code(private_key_original[:150], language="text")
        
        st.write("‚òùÔ∏è **An√°lise:** Se voc√™ vir `\\n` no texto acima, significa que as quebras de linha n√£o est√£o a ser processadas corretamente. O texto deveria aparecer em m√∫ltiplas linhas, como no ficheiro original.")
        st.write("---")

        # 4. Tentar a corre√ß√£o e mostrar o resultado
        st.subheader("4. Tentativa de Corre√ß√£o Autom√°tica")
        try:
            # Cria uma c√≥pia para evitar o erro "item assignment"
            creds_copy = dict(creds_dict)
            creds_copy['private_key'] = creds_copy['private_key'].replace('\\n', '\n')
            private_key_corrigida = creds_copy['private_key']
            
            st.write("**Primeiros 150 caracteres da chave AP√ìS a corre√ß√£o:**")
            st.code(private_key_corrigida[:150], language="text")
            st.success("‚úÖ A corre√ß√£o foi aplicada com sucesso no c√≥digo.")
            st.write("Se o texto acima agora aparece em m√∫ltiplas linhas (sem `\\n`), o problema est√° resolvido no c√≥digo.")

        except Exception as e:
            st.error(f"Ocorreu um erro ao tentar corrigir a chave: {e}")

        st.write("---")
        st.info("Fim da depura√ß√£o. Por favor, envie uma captura de ecr√£ completa desta p√°gina para que eu possa fazer o diagn√≥stico final.")

    except Exception as e:
        st.error(f"Ocorreu um erro inesperado durante a depura√ß√£o: {e}")
    
    # Para a execu√ß√£o da aplica√ß√£o aqui
    st.stop()

# --- PONTO DE ENTRADA PRINCIPAL ---
# Chama diretamente a fun√ß√£o de depura√ß√£o
debug_firestore_secrets()
